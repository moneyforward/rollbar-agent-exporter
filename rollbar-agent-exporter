#!/usr/bin/env python3

import configparser
import logging
import optparse  # instead of argparse, for python2.6 compat
import os
import shelve
import sys
import signal
import threading
import time
from prometheus_client import start_http_server, Gauge

log = logging.getLogger(__name__)

DEFAULT_DATEFMT = '%Y-%m-%d %H:%M:%S,%f'


def build_option_parser():
    parser = optparse.OptionParser()

    parser.add_option('-c', '--config', dest='config_file', action='store',
                      default='rollbar-agent-exporter.conf', help='Path to configuration file. Default: rollbar-agent.conf in the working directory.')

    return parser


def iteritems(_dict):
    return _dict.items() if not hasattr(_dict, 'iteritems') else _dict.iteritems()


def parse_config(filename):
    # if the filename containing rollbar agent configuration does not exist, exit
    if not os.path.isfile(filename):
        logging.critical('The config file %s was not found.', filename)
        sys.exit(1)

    defaults = {
        'statefile': '/var/cache/rollbar-agent.state',
        'sleep_time': '10',
        'state_proto': '0',
        'port': '8000',
    }

    if sys.version_info >= (3, 2):
        cp = configparser.ConfigParser(defaults)
    else:
        cp = configparser.SafeConfigParser(defaults)
    cp.read([filename])

    config = cp.defaults()

    return config

# main thread and loop


class ScannerThread(threading.Thread):
    """
    The main 'scanner' thread - scans files and posts items to the rollbar api.
    There should only be a single instance of this thread.
    """

    def __init__(self, stop_event, config):
        super(ScannerThread, self).__init__()
        self.stop_event = stop_event
        self.config = config

        self.apps = {}
        for app_name, app_config in iteritems(config):
            if app_name.startswith('_'):
                continue
            self.apps[app_name] = {
                'config': app_config,
            }

    def run(self):
        sleep_seconds = int(self.config['sleep_time'])
        port = int(self.config['port'])
        g_pos = Gauge('pos_watcher', 'tracking change of pos',
                      ['filename'])
        g_inode = Gauge('inode_watcher', 'tracking change of inode',
                        ['filename'])
        start_http_server(port)
        log.info("Start metric in port %s" % port)
        while not self.stop_event.is_set():
            log.info("scanner thread looping...")
            try:
                self.scan_all(g_pos, g_inode)
            except:
                log.exception("Caught exception in ScannerThread.run() loop")

            time.sleep(sleep_seconds)

    def scan_all(self, g_pos, g_inode):
        state = self.load_state()
        apps_state = state.get('apps', {})
        for app_name in apps_state:
            for file in apps_state[app_name]:
                for filename in apps_state[app_name][file]:
                    # set gauge metrics
                    g_pos.labels(filename).set(
                        apps_state[app_name][file][filename]['pos'])
                    g_inode.labels(filename).set(
                        apps_state[app_name][file][filename]['inode'])

    def load_state(self):
        try:
            return shelve.open(self.config['statefile'], flag='r',
                               protocol=int(self.config['state_proto']))
        except:
            log.error("Could not open statefile for writing. "
                      "Perhaps the directory doesn't exist? "
                      "You can configure this by modifying the 'statefile' in rollbar-agent.conf. "
                      "Current value is %s" % self.config['statefile'])
            raise


def register_signal_handlers(stop_event):
    def signal_handler(signum, frame):
        log.info("Shutting down...")
        stop_event.set()

    for sig in (signal.SIGINT, signal.SIGTERM, signal.SIGQUIT, signal.SIGALRM):
        signal.signal(sig, signal_handler)


def main_loop(config):
    stop_event = threading.Event()
    register_signal_handlers(stop_event)
    scanner = ScannerThread(stop_event, config)
    scanner.start()

    # sleep until the thread is killed
    # have to sleep in a loop, instead of worker.join(), otherwise we'll never get the signals
    while scanner.is_alive():
        time.sleep(1)

    log.info("Shutdown complete")


if __name__ == '__main__':
    # first parse command-line options to get the path to the config file
    parser = build_option_parser()
    (options, args) = parser.parse_args()

    # now parse the config file
    config = parse_config(options.config_file)

    # set up logging
    level = logging.INFO

    formatter = logging.Formatter("%(asctime)s %(levelname)-5.5s %(message)s")
    handler = logging.StreamHandler()
    handler.setFormatter(formatter)
    handler.setLevel(level)
    log.addHandler(handler)
    log.setLevel(level)

    # main loop
    main_loop(config)
